// Example program
#include <iostream>
#include <string>
#include <vector>
#include <cmath>


#include <array>

using namespace std;


class Point : public std::array<double, 2>
{
public:                                                                               
	static const int DIM = 2;
	Point() {}
	Point(double x, double y) { (*this)[0] = x; (*this)[1] = y; }
};


double distance(const vector<Point>& coords, int a, int b) {
    return sqrt( pow(coords[a][0] - coords[b][0], 2) + pow(coords[a][1] - coords[b][1], 2) );
}

double distance(const vector<Point>& coords, const vector<int>& path) {
    double dist = 0.0;
    
    for (unsigned int i = 0; i < path.size()-1; ++i) {
        dist += distance(coords, path[i], path[i+1]);
    }
    
    return dist;
}

double distance(const vector<Point>& coords, const vector<int>& path, unsigned int from, unsigned int to, bool reverse=false) { // starts at from and stops when at to
    double dist = 0.0;
    
    if (!reverse) {
        for (unsigned int i = from; i < to; ++i) {
            dist += distance(coords, path[i], path[i+1]);
        }
    } else {
        for (unsigned int i = to; i != from; --i) {
            dist += distance(coords, path[i], path[i-1]);
        }
    }
    
    return dist;
}


int main()
{
    vector<int> path = {0, 1, 2, 3, 4, 5, 0};
    vector<Point> coords;

    for (unsigned int i = 0; i < path.size() - 1; ++i) {
        coords.push_back(Point(i,i));
    }
    
    cout << distance(coords, path[1], path[2]) << endl;
    cout << distance(coords, path[0], path[path.size()-1]) << endl;
    cout << distance(coords, path) << endl;
    cout << distance(coords, path, 0, path.size()-1) << endl;
    cout << distance(coords, path, 2, 4) << endl;
    cout << distance(coords, path, 2, 4, true) << endl;

    
    for (unsigned int i = 0; i < path.size(); ++i) {
        cout << path[i] << endl;   
    }
 
 return 0;
}
