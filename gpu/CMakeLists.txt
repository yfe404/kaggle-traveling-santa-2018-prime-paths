# https://devblogs.nvidia.com/building-cuda-applications-cmake/
cmake_minimum_required(VERSION 3.8 FATAL_ERROR)
project(santa LANGUAGES CXX CUDA)

# Executables
add_executable(main src/main.cu)

# Tests
find_package(CxxTest)

if(CXXTEST_FOUND)
    include_directories(${CXXTEST_INCLUDE_DIR})
    enable_testing()
    CXXTEST_ADD_TEST(
        test_problem
        test_problem.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/test/test_problem.hpp
    )
endif()

# add_executable(main src/main.cpp)

# Tests
#add_executable(test_problem test/problem.cpp)

#add_test(NAME test_problem COMMAND test_problem)

# add_library(particles STATIC
#     randomize.cpp
#     randomize.h
#     particle.cu
#     particle.h
#     v3.cu
#     v3.h
#     )
    
# # Request that particles be built with -std=c++11
# # As this is a public compile feature anything that links to 
# # particles will also build with -std=c++11
# target_compile_features(particles PUBLIC cxx_std_11)
    
# # We need to explicitly state that we need all CUDA files in the 
# # particle library to be built with -dc as the member functions 
# # could be called by other libraries and executables
# set_target_properties( particles
#                         PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
    
# add_executable(particle_test test.cu)
    
# set_property(TARGET particle_test 
#                 PROPERTY CUDA_SEPARABLE_COMPILATION ON)
# target_link_libraries(particle_test PRIVATE particles)
    
# if(APPLE)
#     # We need to add the path to the driver (libcuda.dylib) as an rpath, 
#     # so that the static cuda runtime can find it at runtime.
#     set_property(TARGET particle_test 
#                 PROPERTY
#                 BUILD_RPATH ${CMAKE_CUDA_IMPLICIT_LINK_DIRECTORIES})
# endif()